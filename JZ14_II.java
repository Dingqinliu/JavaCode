//给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），
// 每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？
// 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
//答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

public class JZ14_II {
    public int cuttingRope(int n){
        // 1、
//        if(n==2) {
//            return 1; //为满足m>1的题意 拆成1 1
//        }
//        if(n==3){
//            return 2; //为满足m>1的题意 拆成1 2
//        }
//        long res=1;
//        while (n>4){ //4=2+2=2*2 所以4可以不处理 直接乘
//           res=res*3; //分解出尽可能多的3
//           res=res%10000_00007;
//           n=n-3; //每分出一个3 n就少一截3
//        }
//        return (int)(res*n%10000_00007); //分到最后 当n<=4了 直接乘res再取模

        // 2、
        return n<3?n-1:(int) (int)compute(n);
    }
    public long compute(long n){
        return n>4?(compute(n-3)*3)%10000_00007:n;
    }

}
